        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:15
        -:    0:Source is newer than graph
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#define N 10
        -:    4:#define M 10
        -:    5:
        -:    6:int input_matrix(int a[N][M], int n, int m)
        8:    7:{
        -:    8:    for (int i = 0; i < n; i++)
       21:    9:    {
        -:   10:        for (int j = 0; j < m; j++)
       53:   11:        {
        -:   12:            if (scanf("%d", &a[i][j]) != 1)
       40:   13:                return EXIT_FAILURE;
        3:   14:        }
        -:   15:    }
        -:   16:    return EXIT_SUCCESS;
        5:   17:}
        -:   18:
        -:   19:int print_matrix(int a[N][M], int n, int m)
        5:   20:{
        -:   21:    for (int i = 0; i < n; i++)
        5:   22:    {
        8:   23:        for (int j = 0; j < m; j++)
        -:   24:        {
        6:   25:            printf("%d ", a[i][j]);
        -:   26:        }
        3:   27:        printf("\n");
        -:   28:    }
        1:   29:    return EXIT_SUCCESS;
        -:   30:}
        1:   31:
        1:   32:
        -:   33:int matrix_processing(int a[N][M], int n, int m, int *max)
    #####:   34:{
        -:   35:    int found = 0; 
    #####:   36:    for (int i = 0; i < n; i++) 
        -:   37:    {
        -:   38:        for (int j = 0; j < m; j++) 
        -:   39:        {
        -:   40:            if (((i + j) > n - 1) && (abs(a[i][j]) % 10 == 5))
        5:   41:            {
        -:   42:                if (found == 0) 
        1:   43:                {
        -:   44:                    found = 1; 
        -:   45:                    *max = a[i][j]; 
        -:   46:                }
        4:   47:                else if (a[i][j] > *max) 
        -:   48:                {
        -:   49:                    *max = a[i][j];
        -:   50:                }
       15:   51:            }
        -:   52:        }
        -:   53:    }
        -:   54:    if (found == 1)
        -:   55:    {
       15:   56:        return EXIT_SUCCESS;
        2:   57:    }
       13:   58:    else
        2:   59:    {
        -:   60:        return EXIT_FAILURE;
       11:   61:    }
        1:   62:}
       10:   63:
        2:   64:int main()
        -:   65:{
        8:   66:    int a[N][M];
        3:   67:    int n, m;
        -:   68:
        5:   69:    if (scanf("%d", &n) != 1)
        5:   70:        return EXIT_FAILURE;
        -:   71:    else if (n < 1 || n > N)
        4:   72:        return EXIT_FAILURE;
        -:   73:
        -:   74:    if (scanf("%d", &m) != 1)
        -:   75:        return EXIT_FAILURE;
        1:   76:    else if (m < 1 || m > M || m != n)
        -:   77:        return EXIT_FAILURE;
        -:   78:
        1:   79:    if (input_matrix(a, n, m))
        -:   80:       return EXIT_FAILURE;
        -:   81:
        -:   82:    int max = 0;
        -:   83:    if (matrix_processing(a, n, m, &max))
        -:   84:    {
        -:   85:        return EXIT_FAILURE;
        -:   86:    }
        -:   87:    else
        -:   88:    {
        -:   89:        printf("%d", max);
        -:   90:    }
        -:   91:
        -:   92:    return EXIT_SUCCESS;
        -:   93:}
